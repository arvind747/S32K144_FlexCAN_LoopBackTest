/** 
@defgroup lpspi Low Power Serial Peripheral Interface (LPSPI)
@brief Low Power Serial Peripheral Interface (LPSPI) Peripheral Driver
<p>
  The LPSPI driver allows communication on an SPI bus using the LPSPI module in the S32144K processor.
</p>
  ## Features ##
   - Interrupt based
   - Master or slave operation
   - Provides blocking and non-blocking transmit and receive functions
   - RX and TX hardware buffers (4 words)
   - 4 configurable chip select
   - Configurable baud rate


  ## How to integrate LPSPI in your application ##
<p>
  In order to use the LPSPI driver it must be first initialized in either master or slave mode, 
  using functions LPSPI_DRV_MasterInit() or LPSPI_DRV_SlaveInit(). Once initialized, it cannot 
  be initialized again for the same LPSPI module instance until it is de-initialized, using 
  LPSPI_DRV_MasterDeinit() or LPSPI_DRV_SlaveDeinit(). Different LPSPI module instances can function 
  independently of each other.
</p>

<p>
  In each mode (master/slave) are available two types of transfers: blocking and non-blocking. 
  The functions which initiate blocking transfers will configure the time out for transmission. If 
  time expires LPSPI_MasterTransferBlocking/LPSPI_SlaveTransferBlocking will return error and the
  transmission will be aborted.
  
</p>
 

  ## Important Notes ##
<p>
  - The driver enables the interrupts for the corresponding LPSPI module, but any interrupt priority 
  setting must be done by the application.
  - The watermarks will be set by the application.
  - The current driver will configure SCK to PCS delay, PCS to SCK delay, delay between transfers 
  with default values. If you application needs other values for this parameters please follow this
  steps:
	1. initialize the driver (LPSPI_DRV_MasterInit/LPSPI_DRV_SlaveInit)
	2. LPSPI_HAL_Disable(LPSPI0);
	3. LPSPI_HAL_SetDelay(LPSPI0, LPSPI_PCS_TO_SCK, 50U);
	4. LPSPI_HAL_SetDelay(LPSPI0, LPSPI_SCK_TO_PCS, 50U);
	5. LPSPI_HAL_SetDelay(LPSPI0, LPSPI_BETWEEN_TRANSFER, 50U);
	6. LPSPI_HAL_Enable(LPSPI0);
	7. start transfer
</p>
 ## Example code ##
 
	@code
	const lpspi_master_config_t Send_MasterConfig0 = {
		.bitsPerSec = 50000U,
		.whichPcs = LPSPI_PCS0,
		.pcsPolarity = LPSPI_ACTIVE_HIGH,
		.isPcsContinuous = false,
		.bitcount = 8U,
		.lpspiSrcClk = 8000000U,
		.clkPhase = LPSPI_CLOCK_PHASE_1ST_EDGE,
		.clkPolarity = LPSPI_SCK_ACTIVE_HIGH,
		.lsbFirst = false,
		.rxWatermark = 2U,
		.txWatermark = 2U,
	};
	const lpspi_slave_config_t Receive_SlaveConfig0 = {
		.pcsPolarity = LPSPI_ACTIVE_HIGH,
		.bitcount = 8U,
		.clkPhase = LPSPI_CLOCK_PHASE_1ST_EDGE,
		.whichPcs = LPSPI_PCS0,
		.clkPolarity = LPSPI_SCK_ACTIVE_HIGH,
		.lsbFirst = false,
		.rxWatermark = 0U,
		.txWatermark = 2U,
	};
	/* Initialize clock and pins */
	LPSPI_DRV_MasterInit(0U, &masterState, &Send_MasterConfig0);
	LPSPI_HAL_Disable(LPSPI0);
	LPSPI_HAL_SetDelay(LPSPI0, LPSPI_PCS_TO_SCK, 30);
	LPSPI_HAL_SetDelay(LPSPI0, LPSPI_SCK_TO_PCS, 30);
	LPSPI_HAL_SetDelay(LPSPI0, LPSPI_BETWEEN_TRANSFER, 30);
	LPSPI_HAL_Enable(LPSPI0);
	/* Initialize LPSPI1 (Slave)*/
	LPSPI_DRV_SlaveInit(1U, &slaveState, &Receive_SlaveConfig0);
	/* Allocate memory */
	masterDataSend = (uint8_t*)calloc(100, sizeof(uint8_t));
	masterDataReceive = (uint8_t*)calloc(100, sizeof(uint8_t));
	slaveDataSend = (uint8_t*)calloc(100, sizeof(uint8_t));
	slaveDataReceive = (uint8_t*)calloc(100, sizeof(uint8_t));
	bufferSize = 100U;
	testStatus[0] = true;
	LPSPI_DRV_SlaveTransfer(0U, slaveDataSend,
			  	  slaveDataReceive, bufferSize);
	LPSPI_DRV_MasterTransferBlocking(1U, &Send_MasterConfig0, masterDataSend,
	  			  masterDataReceive, bufferSize, TIMEOUT);



 @endcode
*/
