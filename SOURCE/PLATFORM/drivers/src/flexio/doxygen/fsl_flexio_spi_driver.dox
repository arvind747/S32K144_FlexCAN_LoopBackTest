/** 
@defgroup flexio_spi_drv FlexIO SPI Driver
@ingroup flexio
@brief SPI communication over FlexIO module (FLEXIO_SPI)
<p>
  The FLEXIO_SPI Driver allows communication on an SPI bus using the FlexIO module in the S32144K processor.
</p>
  ## Features ##
   - Master or slave operation
   - Interrupt or polling mode
   - Provides blocking and non-blocking transfer functions
   - Configurable baud rate
   - Configurable clock polarity and phase
   - Configurable bit order and data size

  ## Functionality ##
<p>
  In order to use the FLEXIO_SPI Driver it must be first initialized
  using functions FLEXIO_SPI_DRV_MasterInit() or FLEXIO_SPI_DRV_SlaveInit(). Once initialized, it cannot 
  be initialized again for the same FlexIO module instance until it is de-initialized, using 
  FLEXIO_SPI_DRV_MasterDeinit() or FLEXIO_SPI_DRV_SlaveDeinit(). Different driver instances on different 
  FlexIO module instances can function independently of each other.
</p>

  ### Master Mode ###
<p>
  Master Mode provides functions for transmitting or receiving data to/from an SPI slave. Baud rate is provided at 
  initialization time through the master configuration structure, 
  but can be changed at runtime by using FLEXIO_SPI_DRV_MasterSetBaudRate() function. 
  Note that due to module limitation not any baud rate can be achieved. The driver will set a baud rate as 
  close as possible to the requested baud rate, but there may still be substantial differences, for example 
  if requesting a high baud rate while using a low-frequency FlexIO clock. The 
  application should call FLEXIO_SPI_DRV_MasterGetBaudRate() after FLEXIO_SPI_DRV_MasterSetBaudRate() to check what 
  baud rate was actually set.
</p>
<p>
  To send or receive data, use function FLEXIO_SPI_DRV_MasterTransfer(). The transmit and receive buffers, together with 
  parameters for the transfer are provided through the \ref flexio_spi_transfer_t structure. If only transmit or receive is 
  desired, any one of the Rx/Tx buffers can be set to NULL.
</p>
<p>
  Blocking operations will return only when the transfer is completed, either successfully or with error. 
  Non-blocking operations will initiate the transfer and return \ref FLEXIO_SPI_STATUS_SUCCESS, but the module is still 
  busy with the transfer and another transfer can't be initiated until the current transfer is complete. The 
  application can check the status of the current transfer by calling FLEXIO_SPI_DRV_MasterGetStatus(). 
  If the transfer is still ongoing this function will return 
  \ref FLEXIO_SPI_STATUS_BUSY. If the transfer is completed, the function will return either \ref FLEXIO_SPI_STATUS_SUCCESS 
  or an error code, depending on the outcome of the last transfer.
</p>
<p>
  The driver supports both interrupt and polling mode. In polling mode the function FLEXIO_SPI_DRV_MasterGetStatus()
  ensures the progress of the transfer by checking and handling transmit and receive events reported by the
  FlexIO module. The application should ensure that this function is called often enough (at least once per 
  transferred byte)to avoid Tx underflows or Rx overflows. 
</p>

  ### Slave Mode ###
<p>
  Slave Mode is very similar to master mode, the main difference being that the FLEXIO_SPI_DRV_SlaveInit() function
  initializes the FlexIO module to use the clock signal received from the master instead of generating it. Consequently,
  there is no <tt>SetBaudRate</tt> function in slave mode. Other than that, the slave mode offers a similar interface
  to the master mode. FLEXIO_SPI_DRV_MasterTransfer() can be used to initiate transfers, and FLEXIO_SPI_DRV_SlaveGetStatus()
  is used to check the status of the transfer and advance the transfer in polling mode. All other specifications from the 
  Master Mode description apply for Slave Mode too
</p>


  ## Important Notes ##
<p>
  - Before using the FLEXIO_SPI Driver the protocol clock of the module must be configured. Refer 
  to SCG HAL and PCC HAL for clock configuration.
  - Before using the FLEXIO_SPI Driver the pins must be routed to the FlexIO module. Refer to PORT HAL for pin 
  routing configuration. Note that any of the available FlexIO pins can be used for MOSI, MISO, SCK and SS 
  (configurable at initialization time).
  - The driver enables the interrupts for the corresponding FlexIO module, but any interrupt priority 
  setting must be done by the application.
  - The driver does not support back-to-back transmission mode for CPHA = 1
  - The driver does not support configurable polarity for SS signal (only active-low is supported)
</p>
*/
