/** 
@defgroup flexio_i2c_drv FlexIO I2C Driver
@ingroup flexio
@brief I2C communication over FlexIO module (FLEXIO_I2C)
<p>
  The FLEXIO_I2C Driver allows communication on an I2C bus using the FlexIO module in the S32144K processor.
</p>
  ## Features ##
   - Master operation only
   - Interrupt or polling mode
   - Provides blocking and non-blocking transmit and receive functions
   - 7-bit addressing
   - clock stretching
   - Configurable baud rate

  ## Functionality ##
<p>
  In order to use the FLEXIO_I2C Driver it must be first initialized
  using functions FLEXIO_I2C_DRV_MasterInit(). Once initialized, it cannot 
  be initialized again for the same FlexIO module instance until it is de-initialized, using 
  FLEXIO_I2C_DRV_MasterDeinit(). Different driver instances on different FlexIO module instances can function 
  independently of each other.
</p>

  ### Master Mode ###
<p>
  Master Mode provides functions for transmitting or receiving data to/from any I2C slave. Slave 
  address and baud rate are provided at initialization time through the master configuration structure, 
  but they can be changed at runtime by using FLEXIO_I2C_DRV_MasterSetBaudRate() or FLEXIO_I2C_DRV_MasterSetSlaveAddr(). 
  Note that due to module limitation not any baud rate can be achieved. The driver will set a baud rate as 
  close as possible to the requested baud rate, but there may still be substantial differences, for example 
  if requesting a high baud rate while using a low-frequency FlexIO clock. The 
  application should call FLEXIO_I2C_DRV_MasterGetBaudRate() after FLEXIO_I2C_DRV_MasterSetBaudRate() to check what 
  baud rate was actually set.
</p>
<p>
  To send or receive data to/from the currently configured slave address, use functions FLEXIO_I2C_DRV_MasterSendData()
  or FLEXIO_I2C_DRV_MasterReceiveData() (or their blocking counterparts). Parameter <tt>sendStop</tt> can be
  used to chain multiple transfers with repeated START condition between them, for example when sending a command
  and then immediately receiving a response. The application should ensure that any send or receive transfer with
  <tt>sendStop</tt> set to <tt>false</tt> is followed by another transfer. The last transfer from a chain should 
  always have <tt>sendStop</tt> set to <tt>true</tt>.
</p>
<p>
  Blocking operations will return only when the transfer is completed, either successfully or with error. 
  Non-blocking operations will initiate the transfer and return \ref FLEXIO_I2C_STATUS_SUCCESS, but the module is still 
  busy with the transfer and another transfer can't be initiated until the current transfer is complete. The 
  application can check the status of the current transfer by calling FLEXIO_I2C_DRV_MasterGetStatus(). 
  If the transfer is still ongoing this function will return 
  \ref FLEXIO_I2C_STATUS_BUSY. If the transfer is completed, the function will return either \ref FLEXIO_I2C_STATUS_SUCCESS 
  or an error code, depending on the outcome of the last transfer.
</p>
<p>
  The driver supports both interrupt and polling mode. In polling mode the function FLEXIO_I2C_DRV_MasterGetStatus()
  ensures the progress of the transfer by checking and handling transmit and receive events reported by the
  FlexIO module. The application should ensure that this function is called often enough (at least once per 
  transferred byte) to avoid Tx underflows or Rx overflows. 
</p>

  ## Important Notes ##
<p>
  - Before using the FLEXIO_I2C Driver the FlexIO clock must be configured. Refer 
  to SCG HAL and PCC HAL for clock configuration.
  - Before using the FLEXIO_I2C Driver the pins must be routed to the FlexIO module. Refer to PORT HAL for pin 
  routing configuration. Note that any of the available FlexIO pins can be used for SDA and SCL (configurable 
  at initialization time).
  - The driver enables the interrupts for the corresponding FlexIO module, but any interrupt priority 
  setting must be done by the application.
  - Aborting a transfer will release control of the SDA and SCL lines without generating a STOP condition. 
  This is normally not an issue, since the next transfer will start by generating a (repeated) START condition.
  - The module can handle clock stretching done by the slave, but will not do clock stretching when the application 
  does not provide data fast enough, so Tx overflows and Rx underflows are possible. This can be an issue especially 
  in polling mode if the function FLEXIO_I2C_DRV_MasterGetStatus() is not called often enough.
  - Due to device limitations it is not possible to tell the difference between NACK reception and receiver overflow.
  The driver will treat these events as NACK and immediately abort the current transfer.
  - Due to device limitations there is a maximum limit of 13 bytes (\ref FLEXIO_I2C_MAX_SIZE) on the size of any transfer.
  - The driver does not support multi-master mode. It does not detect arbitration loss and it does not check the line 
  for activity before initiating a transfer.
</p>
*/
