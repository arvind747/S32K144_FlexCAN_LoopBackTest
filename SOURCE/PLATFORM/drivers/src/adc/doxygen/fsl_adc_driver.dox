/*!
 * @defgroup adc_driver ADC Driver
 * @ingroup adc
 * @brief Analog to Digital Converter Peripheral Driver.
 *
 * ## Hardware background ##
 * The ADC of the S32K144 is a selectable resolution (8, 10, 12-bit), single-ended,
 * SAR converter. It has 20 selectable input channels (16 external, 4 internal)
 * and 16 result channels (each with a result register, a channel selection and
 * interrupt enable).
 *
 * <b>Sample time</b> is configurable through selection of A/D clock and a
 * configurable sample time (in A/D clocks).
 *
 * Also provided are the Hardware Average and Hardware Compare Features.
 *
 * <b>Hardware Average</b> will sample a selectable number of measurements and
 * average them before signaling a Conversion Complete.
 *
 * <b>Hardware Compare</b> can be used to signal if an input channel goes outside
 * (or inside) of a predefined range.
 *
 * The <b>Calibration</b> features can be used to automatically calibrate or
 * fine-tune the ADC before use.
 *
 * ## Driver consideration ##
 * The ADC Driver provides access to all features, but not all need to be
 * configured to use the ADC.
 * The user application can use the default for most settings, changing only
 * what is necessary. For example, if Compare or Average features are not used,
 * the user does not need to configure them.
 *
 * The Driver uses structures for configuration. Each structure contains members
 * that are specific to its respective functionality. There is a \b converter
 * structure, a hardware \b compare structure, a hardware \b average structure
 * and a \b calibration structure. Each struct has a corresponding
 * <tt>InitStruct()</tt> method that can be used to initialize the members to
 * reset values, so the user can change only the values that are specific to the
 * application.
 *
 * All methods that access the hardware layer will return an error code to signal
 * if the operation succeeded or failed. These values are defined by the
 * adc_drv_status_t enumeration, and the possible values are:
 *  - ADC_DRV_SUCCESS: operation succeeded
 *  - ADC_DRV_FAIL: operation failed
 *
 * ## Interrupt handling ##
 * The ADC Driver in S32 SDK does not use interrupts internally. These can be
 * defined by the user application.
 * There are two ways to add an ADC interrupt:
 *  1. Using the weak symbols defined by start-up code. if the methods
 *      <tt>ADC<b>x</b>_Handler(void)</tt> (x denotes instance number) are not
 *      defined, the linker use a default ISR. An error will be generated if
 *      methods with the same name are defined multiple times. This method works
 *      regardless of the placement of the interrupt vector table (Flash or RAM).
 *  2. Using the Driver's <tt>ADC_DRV_InstallHandlerIsr()</tt> method. This can
 *      be used to dynamically change the ISR at run-time. This method works
 *      only if the interrupt vector table is located in RAM (S32 SDK behavior).
 *
 * ## Clocking and pin configuration ##
 * The ADC Driver does not handle clock setup (from PCC) or any kind of pin
 * configuration (done by PORT module). This is handled by the Clock Manager and
 * PORT module, respectively. The driver assumes that correct clock
 * configurations have been made, so it is the user's responsibility to set up
 * clocking and pin configurations correctly.
 */