/*
** ###################################################################
**     Processor:           S32K144_100
**     Compiler:            Windriver Diab Compiler
**     Reference manual:    S32K144RM Rev. 1, Draft D, 10/2015
**     Version:             rev. 1.9, 2016-02-23
**     Build:               b160223
**
**     Abstract:
**         Linker file for the Windriver Diab Compiler
**
**     Copyright (c) 2016 Freescale Semiconductor, Inc.
**     All rights reserved.
**
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**     http:                 www.freescale.com
**     mail:                 support@freescale.com
**
** ###################################################################
*/

HEAP_SIZE  = 0x0400;
STACK_SIZE = 0x0400;
M_VECTOR_RAM_SIZE = 0x0400;

/* Specify the memory areas */
MEMORY
{
  m_interrupts          (RX)  : ORIGIN = 0x00000000, LENGTH = 0x00000400
  m_flash_config        (RX)  : ORIGIN = 0x00000400, LENGTH = 0x00000010
  m_text                (RX)  : ORIGIN = 0x00000410, LENGTH = 0x0007FBF0
  m_data                (RW)  : ORIGIN = 0x1FFF8000, LENGTH = 0x00008000
  m_data_2              (RW)  : ORIGIN = 0x20000000, LENGTH = 0x00007000
}

/* Define output sections */
SECTIONS
{
    GROUP : {
        .interrupts : { KEEP(*(.isr_vector)) }
    } > m_interrupts
    
    GROUP : {
        .flash_config : { *(.FlashConfig) }
    } > m_flash_config

    /* Collect all code sections from all input files to make a single output
     * .text section and locate it in "m_text" memory */
    GROUP : {
        .text : { *(.text) *(.rodata) *(.init) *(.fini) }
        .ctors (=TEXT) ALIGN(4):{ ctordtor.o(.ctors) *(.ctors) } 
        .dtors (=TEXT) ALIGN(4):{ ctordtor.o(.dtors) *(.dtors) }
        __DATA_ROM = .;
    } > m_text

    GROUP : {
        /* With the COPYTABLE specification on the GROUP,
         * .data and .sdata sections are placed at the
         * .text2 section in "m_text" (the "physical" address) but will
         * be at the beginning of "m_data" (the "logical" address) at run
         * time. The linker links for "logical" address in "m_data".
         * .sbss and .bss do not occupy any space in "m_text" and 
         * they are linked for "logical" address in "m_data".
         */
         
        .interrupts_ram :
        {
            . = ALIGN(4);
            __VECTOR_RAM__ = .;
            KEEP(*(.m_interrupts_ram))     /* This is a user defined section */
            . += M_VECTOR_RAM_SIZE;
            . = ALIGN(4);
        }

        .data (DATA) LOAD (__DATA_ROM): 
                {
                __data_start__ = .; 
                *(.data) *(.sdata) *(.j_pdata) 
                __data_end__ = .; 
                __DATA_END = __DATA_ROM + (__data_end__ - __data_start__);
                }     

        /* Allocate uninitialized sections.                         */
         __START_BSS = .;
        .sbss (BSS) : {}
        .bss (BSS) : {}
        __END_BSS = .;
        
        /* Any remaining space will be used as a heap.              */

        __HEAP_START = .;
    } > m_data
    
     
    __StackTop   = ADDR(m_data_2) + SIZEOF(m_data_2);

    __VECTOR_TABLE = ADDR(m_interrupts);
    __DATA_RAM = ADDR(m_data) + M_VECTOR_RAM_SIZE;
    __VECTOR_RAM = ADDR(m_data);
    __RAM_VECTOR_TABLE_SIZE_BYTES = M_VECTOR_RAM_SIZE;
}


